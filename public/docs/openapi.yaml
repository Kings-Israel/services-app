openapi: 3.0.3
info:
  title: 'Services App'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'https://172.104.245.14/services-app'
paths:
  /api/login:
    post:
      summary: 'Login the user.'
      operationId: loginTheUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email or phone number"
                  example: emard.raphaelle@example.net
                password:
                  type: string
                  description: "The user's password"
                  example: 'yG)Gc@?@T/>tU>=%Y<'
              required:
                - email
                - password
      security: []
  /api/register:
    post:
      summary: 'Register the user'
      operationId: registerTheUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: "The vendor's first name"
                  example: et
                last_name:
                  type: string
                  description: "The vendor's last name"
                  example: amet
                email:
                  type: string
                  description: "The vendor's email"
                  example: ashly97@example.com
                phone_number:
                  type: string
                  description: "The vendor's phone number"
                  example: est
                password:
                  type: string
                  description: "The vendor's password"
                  example: 'S,etN}TTt*yX4;3Dzx'
                role:
                  type: string
                  description: "The person's role(vendor or user)"
                  example: nulla
              required:
                - first_name
                - last_name
                - email
                - phone_number
                - password
                - role
      security: []
  /api/forgot-password:
    post:
      summary: 'Request password reset code'
      operationId: requestPasswordResetCode
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number:
                  type: string
                  description: "The user's phone number"
                  example: neque
              required:
                - phone_number
      security: []
  /api/otp/validate:
    post:
      summary: 'Validate the OTP'
      operationId: validateTheOTP
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: 'The Entered code'
                  example: est
              required:
                - code
      security: []
  /api/reset-password:
    post:
      summary: 'Reset Password'
      operationId: resetPassword
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: ''
                  example: aut
                password:
                  type: string
                  description: 'New password'
                  example: '(_{Yqm>J'
                password_confirmation:
                  type: string
                  description: 'New password confirmation'
                  example: qui
              required:
                - code
                - password
                - password_confirmation
      security: []
  /api/google/authenticate:
    post:
      summary: 'Social Login'
      operationId: socialLogin
      description: 'Login through google'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user'
                  example: aspernatur
                email:
                  type: string
                  description: 'The email of the user'
                  example: langosh.macie@example.net
                phone_number:
                  type: string
                  description: "The user's phone number"
                  example: voluptatem
                token:
                  type: string
                  description: 'A google provided token'
                  example: quaerat
                email_verified:
                  type: boolean
                  description: 'Whether the user email is verified'
                  example: false
              required:
                - name
                - email
      security: []
  /api/logout:
    post:
      summary: Logout.
      operationId: logout
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Auth APIs'
  /api/categories:
    get:
      summary: 'List all the categories.'
      operationId: listAllTheCategories
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Categories APIs'
      security: []
  '/api/categories/{id}':
    get:
      summary: 'Get Category Details.'
      operationId: getCategoryDetails
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Categories APIs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the category'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: sunt
  /api/reviews:
    get:
      summary: 'Get reviews'
      operationId: getReviews
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Reviews APIs'
      security: []
  '/api/reviews/{id}':
    get:
      summary: 'Get a review'
      operationId: getAReview
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Reviews APIs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the review.'
        example: ullam
        required: true
        schema:
          type: string
      -
        in: path
        name: ID
        description: 'Optional parameter. The ID of the review'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: mollitia
  /api/review:
    post:
      summary: 'Store a review for a service'
      operationId: storeAReviewForAService
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Reviews APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                service_id:
                  type: string
                  description: 'The ID of the service'
                  example: in
                rating:
                  type: integer
                  description: 'The rating of the service'
                  example: 8
                review:
                  type: string
                  description: 'The service review'
                  example: omnis
              required:
                - service_id
                - rating
      security: []
  '/api/review/{id}':
    post:
      summary: 'Update a review'
      operationId: updateAReview
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Reviews APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  description: 'The rating of the service'
                  example: 5
                review:
                  type: string
                  description: 'The review to of the service'
                  example: dicta
              required:
                - rating
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The id of the review'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: natus
  /api/bookmarks:
    get:
      summary: 'Get Bookmarked Services'
      operationId: getBookmarkedServices
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Service Bookmarking APIs'
  '/api/bookmarks/{id}':
    get:
      summary: 'Get Bookmarked Service'
      operationId: getBookmarkedService
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Service Bookmarking APIs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the bookmark.'
        example: neque
        required: true
        schema:
          type: string
      -
        in: path
        name: ID
        description: 'Optional parameter. The ID of the bookmark'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: sequi
  /api/bookmark-service:
    post:
      summary: 'Add or Remove a Service to and from bookmarked services'
      operationId: addOrRemoveAServiceToAndFromBookmarkedServices
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Service Bookmarking APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                service_id:
                  type: string
                  description: ''
                  example: fugiat
                id:
                  type: string
                  description: 'The id of the service'
                  example: vel
              required:
                - service_id
                - id
  '/api/services/{latitude}/{longitude}':
    get:
      summary: 'Get all services.'
      operationId: getAllServices
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      security: []
    parameters:
      -
        in: path
        name: latitude
        description: 'Optional parameter.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: magnam
      -
        in: path
        name: longitude
        description: 'Optional parameter.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: magnam
  '/api/services/{id}':
    get:
      summary: 'Show service details.'
      operationId: showServiceDetails
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The id of the service'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: et
  /api/services:
    post:
      summary: 'Add a new service.'
      operationId: addANewService
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the new service'
                  example: eum
                price_min:
                  type: string
                  description: ''
                  example: et
                location_lat:
                  type: string
                  description: 'The latitude location of the new service'
                  example: sapiente
                location_long:
                  type: string
                  description: 'The longitude location of the new service'
                  example: voluptate
                categories:
                  type: array
                  description: 'The category/categories of the new service'
                  example:
                    - provident
                  items:
                    type: string
                description:
                  type: text
                  description: 'The description of the new service'
                  example: 'Non distinctio ipsum dolor ullam libero ab rerum et.'
                price:
                  type: string
                  description: 'The price of the new service'
                  example: ea
              required:
                - title
                - price_min
                - location_lat
                - location_long
                - categories
                - price
  '/api/services/{id}/update':
    post:
      summary: 'Update a service.'
      operationId: updateAService
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the service'
                  example: molestias
                price_min:
                  type: string
                  description: ''
                  example: tenetur
                location_lat:
                  type: string
                  description: 'The latitude location of the new service'
                  example: dolor
                location_long:
                  type: string
                  description: 'The longitude location of the new service'
                  example: voluptatem
                categories:
                  type: object
                  description: ''
                  example: []
                  properties: []
                description:
                  type: string
                  description: 'The description of the service'
                  example: 'Vel itaque mollitia ex iusto quis amet eos.'
                price:
                  type: string
                  description: 'The price of the service'
                  example: qui
              required:
                - title
                - price_min
                - categories
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The ID of the service'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: neque
  '/api/services/{id}/images/add':
    post:
      summary: 'Add services images'
      operationId: addServicesImages
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: string
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. The id of the service'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: quos
  /api/service/request:
    post:
      summary: 'Request for a service'
      operationId: requestForAService
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                service_id:
                  type: string
                  description: 'The id of the service'
                  example: ut
                message:
                  type: string
                  description: 'An optional message for the service provider'
                  example: ut
              required:
                - service_id
  /api/service/delivery/status/update:
    post:
      summary: 'Change the status of a service delivery request'
      operationId: changeTheStatusOfAServiceDeliveryRequest
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                service_request_id:
                  type: string
                  description: 'The ID of the service request to be changed'
                  example: nobis
                status:
                  type: string
                  description: 'The new status of the service(Completed/Delivered, Delete, Dispute)'
                  example: et
                service_id:
                  type: string
                  description: 'The ID of the service'
                  example: accusamus
              required:
                - service_request_id
                - status
                - service_id
  /api/service/requests:
    get:
      summary: 'Get Service Requests'
      operationId: getServiceRequests
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Services APIs'
  /api/user:
    get:
      summary: 'Get user details.'
      operationId: getUserDetails
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'User APIs'
tags:
  -
    name: 'Auth APIs'
    description: ''
  -
    name: 'Categories APIs'
    description: ''
  -
    name: 'Reviews APIs'
    description: ''
  -
    name: 'Service Bookmarking APIs'
    description: ''
  -
    name: 'Services APIs'
    description: ''
  -
    name: 'User APIs'
    description: ''
